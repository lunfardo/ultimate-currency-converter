{"version":3,"sources":["types.ts","components/CurrencySelector.tsx","components/atoms/OperandInput.tsx","hooks/useRates.ts","hooks/useCurrencyConvertor.ts","components/atoms/OperationModeArrowIcon.tsx","components/ConversionBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OperationMode","CurrencySelector","props","Autocomplete","style","width","options","Object","keys","currencies","renderInput","params","TextField","label","variant","OperandInput","InputLabelProps","shrink","API_KEY","fetchRates","a","queryKey","currenciesMerged","convertionDate","today","Date","endpoint","isEqual","format","fetch","response","json","useCurrencyConvertor","fromCurrency","toCurrency","amount","useState","result","setResult","withError","setWithError","ratesPool","ratesMap","setRatesMap","ratesUniquePair","setRatesUniquePair","query","useQuery","refetchOnWindowFocus","refetchOnMount","staleTime","useEffect","sort","join","getCurrenciesPairKey","currenciesPair","data","rates","useMemo","useRates","useDebounce","OperationModeArrowIcon","operationMode","error","IconButton","color","Forward","ArrowForward","ArrowBack","ConversionBox","memo","leftOperand","setLeftOperand","rightOperand","setRightOperand","leftCurrency","setLeftCurrency","rightCurrency","setRightCurrency","setConvertionDate","setOperationMode","Number","printedResult","setPrintedResult","showAlert","setShowAlert","fixedResult","toFixed","Box","marginBottom","utils","DateFnsUtils","disableToolbar","autoOk","margin","maxDate","id","value","onChange","date","KeyboardButtonProps","display","event","target","onKeyDown","marginLeft","marginRight","Backward","Snackbar","open","Alert","severity","RemoveConversionBoxButton","onClick","aria-label","AddConversionBoxButton","green","queryClient","QueryClient","App","conversionBoxIndexes","setConversionBoxIndexes","isThereMoreThanOneBox","length","QueryClientProvider","client","AppBar","position","Toolbar","padding","map","convertionBoxIndex","index","paddingTop","paddingBottom","indexToRemove","filter","Divider","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9b16853.chunk.js","sourcesContent":["export enum OperationMode {\n  Forward = \"forward\", //left to right convertion operation\n  Backward = \"backward\", //right to left convertion operation\n}\n","/* eslint-disable no-use-before-define */\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { AutocompleteProps } from \"@material-ui/lab/Autocomplete\";\nimport currencies from \"../currencies.json\";\n\nexport const CurrencySelector = ({\n  ...props\n}: Partial<AutocompleteProps<string, false, false, false>>) => {\n  return (\n    <Autocomplete\n      style={{ width: 300 }}\n      {...props}\n      options={Object.keys(currencies)}\n      renderInput={(params: any) => (\n        <TextField {...params} label=\"Choose a Currency\" variant=\"outlined\" />\n      )}\n    />\n  );\n};","import { TextField, TextFieldProps } from \"@material-ui/core\";\n\nexport const OperandInput = ({ ...props }: TextFieldProps) => {\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n      {...props}\n    />\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\nimport { format, isEqual } from \"date-fns\";\n\ntype Rates = Record<string, number>;\ntype RatesPool = { [convertionPair: string]: Rates };\n\n// const API_KEY = \"9b923c95528b39f1055b1e4187a62a58\";\nconst API_KEY = \"c266944752f24393afe3cf6f9fde2f3a\";\n\nconst fetchRates: QueryFunction = async ({ queryKey }) => {\n  const currenciesMerged = queryKey[1] as string;\n  const convertionDate = queryKey[2] as Date;\n  if (!currenciesMerged) {\n    return;\n  }\n  const today = new Date();\n\n  const endpoint = isEqual(convertionDate, today)\n    ? `https://openexchangerates.org/api/latest.json?app_id=${API_KEY}&symbols=${currenciesMerged}`\n    : `https://openexchangerates.org/api/historical/${format(\n        convertionDate,\n        \"yyyy-MM-dd\"\n      )}.json?app_id=${API_KEY}&symbols=${currenciesMerged}`;\n\n  const response = await fetch(endpoint);\n  return await response.json();\n};\n\nconst getCurrenciesPairKey = (\n  fromCurrency: string,\n  toCurrency: string,\n  sorted: boolean = false\n) => {\n  const currencies = [fromCurrency, toCurrency];\n  return sorted ? currencies.sort().join(\",\") : currencies.join(\",\");\n};\n\nexport const useRates = (\n  fromCurrency?: string,\n  toCurrency?: string,\n  convertionDate?: Date\n): RatesPool | null => {\n  const [ratesMap, setRatesMap] = useState<RatesPool | null>(null);\n  const [ratesUniquePair, setRatesUniquePair] = useState<string>(\"\");\n  const query = useQuery(\n    [\n      `rates-${ratesUniquePair}-${convertionDate}`,\n      ratesUniquePair,\n      convertionDate,\n    ],\n    fetchRates,\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      staleTime: 60,\n    }\n  );\n\n  useEffect(() => {\n    if (!fromCurrency || !toCurrency) {\n      return;\n    }\n    setRatesUniquePair(getCurrenciesPairKey(fromCurrency, toCurrency, true));\n  }, [fromCurrency, toCurrency]);\n\n  useEffect(() => {\n    const currenciesPair = `${fromCurrency}-${toCurrency}`;\n    const data = query.data as Record<\"rates\", Rates> | undefined;\n\n    if (!data) {\n      return;\n    }\n\n    setRatesMap((ratesMap) => ({ ...ratesMap, [currenciesPair]: data.rates }));\n  }, [query.data, fromCurrency, toCurrency]);\n\n  return useMemo(() => ratesMap, [ratesMap]);\n};\n","import { useState } from \"react\";\nimport { useDebounce } from \"react-use\";\nimport { useRates } from \"./useRates\";\n\nconst DEBOUNCE_DELAY_MS = 300;\n\nexport const useCurrencyConvertor = (\n  fromCurrency?: string,\n  toCurrency?: string,\n  convertionDate?: Date,\n  amount?: number\n): { result: number | null; withError: boolean } => {\n  const [result, setResult] = useState<number | null>(null);\n  const [withError, setWithError] = useState<boolean>(false);\n  const ratesPool = useRates(fromCurrency, toCurrency, convertionDate);\n\n  useDebounce(\n    () => {\n      if (!ratesPool) {\n        return;\n      }\n      const rates = ratesPool[`${fromCurrency}-${toCurrency}`];\n      if (!amount) {\n        setWithError(true);\n        return;\n      }\n\n      if (!rates || !toCurrency || !fromCurrency) {\n        return;\n      }\n\n      setResult((rates[toCurrency] * amount) / rates[fromCurrency]);\n      setWithError(false);\n    },\n    DEBOUNCE_DELAY_MS,\n    [amount, fromCurrency, toCurrency, ratesPool]\n  );\n\n  return { result, withError };\n};\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { OperationMode } from \"../../types\";\n\nexport const OperationModeArrowIcon: React.FC<{\n  operationMode: OperationMode;\n  error: Boolean;\n}> = ({ operationMode, error }) => {\n  return (\n    <IconButton style={{ color: error ? \"red\" : \"green\" }}>\n      {operationMode === OperationMode.Forward ? (\n        <ArrowForward />\n      ) : (\n        <ArrowBack />\n      )}\n    </IconButton>\n  );\n};\n","import { Box, Snackbar } from \"@material-ui/core\";\n\nimport { memo, useEffect, useState } from \"react\";\nimport { CurrencySelector } from \"./CurrencySelector\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { OperandInput } from \"./atoms/OperandInput\";\nimport { useCurrencyConvertor } from \"../hooks/useCurrencyConvertor\";\nimport { OperationMode } from \"../types\";\nimport { OperationModeArrowIcon } from \"./atoms/OperationModeArrowIcon\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n\nexport const ConversionBox: React.FC = memo(() => {\n  const [leftOperand, setLeftOperand] = useState<string>();\n  const [rightOperand, setRightOperand] = useState<string>();\n  const [leftCurrency, setLeftCurrency] = useState<string>();\n  const [rightCurrency, setRightCurrency] = useState<string>();\n  const [convertionDate, setConvertionDate] = useState(new Date());\n\n  const [operationMode, setOperationMode] = useState<OperationMode>(\n    OperationMode.Forward\n  );\n  const amount =\n    operationMode === OperationMode.Forward ? leftOperand : rightOperand;\n  const { result, withError } = useCurrencyConvertor(\n    operationMode === OperationMode.Forward ? leftCurrency : rightCurrency,\n    operationMode === OperationMode.Forward ? rightCurrency : leftCurrency,\n    convertionDate,\n    Number(amount)\n  );\n  const [printedResult, setPrintedResult] = useState<number | null>(null);\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n\n  useEffect(() => {\n    setPrintedResult(result);\n  }, [result]);\n\n  //Assign result value according to the operation mode\n  useEffect(() => {\n    if (!printedResult) {\n      return;\n    }\n    const fixedResult = printedResult.toFixed(3);\n    if (operationMode === OperationMode.Forward) {\n      setRightOperand(fixedResult);\n    } else {\n      setLeftOperand(fixedResult);\n    }\n  }, [printedResult, operationMode]);\n\n  //Check for inputs errors (ignore them if any operand was cleaned up)\n  useEffect(() => {\n    if (!leftOperand || !rightOperand) {\n      setShowAlert(false);\n      return;\n    }\n    if (withError) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [withError, leftOperand, rightOperand]);\n  const handleDateChange = (date: MaterialUiPickersDate) => {\n    setConvertionDate(date as Date);\n  };\n\n  return (\n    <>\n      <div>\n        <Box marginBottom={1}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              autoOk={true}\n              variant=\"inline\"\n              format=\"dd/MM/yyyy\"\n              margin=\"normal\"\n              maxDate={new Date()}\n              id=\"date-picker-inline\"\n              label=\"Date picker inline\"\n              value={convertionDate}\n              onChange={handleDateChange}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </MuiPickersUtilsProvider>\n        </Box>\n\n        <Box display=\"flex\">\n          {/* LEFT  OPERAND */}\n          <OperandInput\n            error={showAlert}\n            value={leftOperand ?? \"\"}\n            onChange={(event) => {\n              setLeftOperand(event.target.value);\n            }}\n            onKeyDown={() => {\n              setPrintedResult(null);\n              setOperationMode(OperationMode.Forward);\n            }}\n            label={operationMode === OperationMode.Forward ? \"From\" : \"To\"}\n          />\n          <Box marginLeft={1}>\n            <CurrencySelector\n              onChange={(event, value) => {\n                setLeftCurrency(value ?? \"\");\n              }}\n            />\n          </Box>\n          {/**/}\n\n          <Box marginLeft={1} marginRight={1}>\n            <OperationModeArrowIcon\n              error={showAlert}\n              operationMode={operationMode}\n            />\n          </Box>\n\n          {/* RIGHT  OPERAND */}\n          <Box marginRight={1}>\n            <CurrencySelector\n              onChange={(event, value) => {\n                setRightCurrency(value ?? \"\");\n              }}\n            />\n          </Box>\n          <OperandInput\n            error={showAlert}\n            value={rightOperand ?? \"\"}\n            onChange={(event) => {\n              setRightOperand(event.target.value);\n            }}\n            onKeyDown={() => {\n              setPrintedResult(null);\n              setOperationMode(OperationMode.Backward);\n            }}\n            label={operationMode === OperationMode.Forward ? \"To\" : \"From\"}\n          />\n          {/**/}\n        </Box>\n      </div>\n      <Snackbar open={showAlert}>\n        <Alert severity=\"error\">Invalid input!</Alert>\n      </Snackbar>\n    </>\n  );\n});\n","import {\n  Box,\n  Divider,\n  IconButton,\n  AppBar,\n  Toolbar,\n  IconButtonProps,\n} from \"@material-ui/core\";\nimport { ConversionBox } from \"./components/ConversionBox\";\nimport ControlPointIcon from \"@material-ui/icons/ControlPoint\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { green } from \"@material-ui/core/colors\";\nimport { memo, useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst RemoveConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        color=\"secondary\"\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <RemoveCircleIcon />\n      </IconButton>\n    );\n  }\n);\n\nconst AddConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        style={{ color: green[600] }}\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <ControlPointIcon />\n      </IconButton>\n    );\n  }\n);\n\nconst queryClient = new QueryClient();\nconst App = () => {\n  const [conversionBoxIndexes, setConversionBoxIndexes] = useState<number[]>([\n    0, // we have at least 1 box\n  ]);\n  const isThereMoreThanOneBox = conversionBoxIndexes.length > 1;\n\n  const addConvertionBox = () => {\n    setConversionBoxIndexes((conversionBoxIndexes) => [\n      ...conversionBoxIndexes,\n      conversionBoxIndexes[conversionBoxIndexes.length - 1] + 1,\n    ]);\n  };\n\n  const removeConvertionBox = (indexToRemove: number) => () => {\n    setConversionBoxIndexes((conversionBoxIndexes) =>\n      conversionBoxIndexes.filter((index) => index !== indexToRemove)\n    );\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppBar position=\"fixed\">\n        <Toolbar>Ultimate Currency Convertor</Toolbar>\n      </AppBar>\n\n      <Box margin=\"auto\" padding={10} width=\"max-content\">\n        {conversionBoxIndexes.map((convertionBoxIndex, index) => (\n          <>\n            <Box\n              key={convertionBoxIndex}\n              paddingTop={1}\n              paddingBottom={1}\n              display=\"flex\"\n            >\n              <ConversionBox />\n              {isThereMoreThanOneBox && (\n                <RemoveConversionBoxButton\n                  onClick={removeConvertionBox(convertionBoxIndex)}\n                />\n              )}\n            </Box>\n\n            {index !== conversionBoxIndexes.length - 1 && <Divider />}\n          </>\n        ))}\n\n        <Divider />\n\n        <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\n          <AddConversionBoxButton onClick={addConvertionBox} />\n        </Box>\n      </Box>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}