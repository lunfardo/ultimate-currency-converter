{"version":3,"sources":["types.ts","components/CurrencySelector.tsx","components/atoms/OperandInput.tsx","hooks/useRates.ts","hooks/useCurrencyConvertor.ts","components/atoms/OperationModeArrowIcon.tsx","components/ConversionBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OperationMode","CurrencySelector","props","Autocomplete","style","width","options","Object","keys","currencies","renderInput","params","TextField","label","variant","OperandInput","InputLabelProps","shrink","fetchRates","a","queryKey","currenciesMerged","fetch","response","json","useCurrencyConvertor","fromCurrency","toCurrency","amount","useState","result","setResult","withError","setWithError","ratesPool","ratesMap","setRatesMap","ratesUniquePair","setRatesUniquePair","query","useQuery","refetchOnWindowFocus","refetchOnMount","staleTime","useEffect","console","log","sort","join","getCurrenciesPairKey","currenciesPair","data","rates","useMemo","useRates","useDebounce","OperationModeArrowIcon","operationMode","error","IconButton","color","Forward","ArrowForward","ArrowBack","ConversionBox","memo","leftOperand","setLeftOperand","rightOperand","setRightOperand","leftCurrency","setLeftCurrency","rightCurrency","setRightCurrency","showAlert","setShowAlert","setOperationMode","Number","printedResult","setPrintedResult","fixedResult","toFixed","Box","display","value","onChange","event","target","onKeyDown","marginLeft","marginRight","Backward","Snackbar","open","Alert","severity","RemoveConversionBoxButton","onClick","aria-label","AddConversionBoxButton","green","queryClient","QueryClient","App","conversionBoxIndexes","setConversionBoxIndexes","isThereMoreThanOneBox","length","QueryClientProvider","client","AppBar","position","Toolbar","margin","padding","map","convertionBoxIndex","paddingBottom","indexToRemove","filter","index","Divider","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b49200b.chunk.js","sourcesContent":["export enum OperationMode {\n  Forward = \"forward\", //left to right convertion operation\n  Backward = \"backward\", //right to left convertion operation\n}\n","/* eslint-disable no-use-before-define */\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { AutocompleteProps } from \"@material-ui/lab/Autocomplete\";\nimport currencies from \"../currencies.json\";\n\nexport const CurrencySelector = ({\n  ...props\n}: Partial<AutocompleteProps<string, false, false, false>>) => {\n  return (\n    <Autocomplete\n      style={{ width: 300 }}\n      {...props}\n      options={Object.keys(currencies)}\n      renderInput={(params: any) => (\n        <TextField {...params} label=\"Choose a Currency\" variant=\"outlined\" />\n      )}\n    />\n  );\n};","import { TextField, TextFieldProps } from \"@material-ui/core\";\n\nexport const OperandInput = ({ ...props }: TextFieldProps) => {\n  return (\n    <TextField\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n      {...props}\n    />\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\n\ntype Rates = Record<string, number>;\ntype RatesPool = {[convertionPair: string]: Rates};\n\nconst API_KEY = \"9b923c95528b39f1055b1e4187a62a58\";\n\nconst fetchRates: QueryFunction = async ({ queryKey }) => {\n  const currenciesMerged = queryKey[1] as string;\n  if (!currenciesMerged) {\n    return;\n  }\n  const response = await fetch(\n    `http://api.exchangeratesapi.io/v1/latest?access_key=${API_KEY}&symbols=${currenciesMerged}`\n  );\n  return await response.json();\n};\n\nconst getCurrenciesPairKey = (fromCurrency: string, toCurrency: string, sorted: boolean = false) => {\n const currencies = [fromCurrency, toCurrency]\n return sorted? currencies.sort().join(\",\") : currencies.join(\",\")\n}\n\nexport const useRates = (fromCurrency?: string, toCurrency?:string): RatesPool | null => {\n  const [ratesMap, setRatesMap] = useState<RatesPool | null>(null);\n  const [ratesUniquePair,setRatesUniquePair] = useState<string>(\"\");\n  const query = useQuery(\n    [`rates-${ratesUniquePair}`, ratesUniquePair],\n    fetchRates,{\n      refetchOnWindowFocus:false,\n      refetchOnMount: false,\n      staleTime:60\n    }\n  );\n\n  useEffect(() => {\n    if(!fromCurrency || !toCurrency) {\n      return;\n    }\n    console.log(\"new key!\")\n    setRatesUniquePair(getCurrenciesPairKey(fromCurrency, toCurrency, true));\n  },[fromCurrency, toCurrency])\n\n  useEffect(() => {\n    const currenciesPair = `${fromCurrency}-${toCurrency}`\n    const data = query.data as Record<\"rates\",Rates>;\n    console.log(data)\n    if(!data) {\n      return;\n    }\n    setRatesMap(ratesMap => ({...ratesMap, [currenciesPair]: data.rates as Rates  }))\n  }, [query.data,fromCurrency,toCurrency])\n\n  return useMemo(() => ratesMap, [ratesMap]);\n};\n","import { useState } from \"react\";\nimport { useDebounce } from \"react-use\";\nimport { useRates } from \"./useRates\";\n\nconst DEBOUNCE_DELAY_MS = 300;\n\nexport const useCurrencyConvertor = (\n  fromCurrency?: string,\n  toCurrency?: string,\n  amount?: number\n): { result: number | null; withError: boolean } => {\n  const [result, setResult] = useState<number | null>(null);\n  const [withError, setWithError] = useState<boolean>(false);\n  const ratesPool = useRates(fromCurrency, toCurrency);\n\n  useDebounce(\n    () => {\n      if(!ratesPool) {\n        return;\n      }\n      const rates = ratesPool[`${fromCurrency}-${toCurrency}`];\n      if (!amount) {\n        setWithError(true);\n        return;\n      }\n\n      if (!rates || !toCurrency || !fromCurrency) {\n        return;\n      }\n\n      setResult((rates[toCurrency] * amount) / rates[fromCurrency]);\n      setWithError(false);\n    },\n    DEBOUNCE_DELAY_MS,\n    [amount, fromCurrency, toCurrency, ratesPool]\n  );\n\n  return { result, withError };\n};\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { OperationMode } from \"../../types\";\n\nexport const OperationModeArrowIcon: React.FC<{\n  operationMode: OperationMode;\n  error: Boolean;\n}> = ({ operationMode, error }) => {\n  return (\n    <IconButton style={{ color: error ? \"red\" : \"green\" }}>\n      {operationMode === OperationMode.Forward ? (\n        <ArrowForward />\n      ) : (\n        <ArrowBack />\n      )}\n    </IconButton>\n  );\n};\n","import { Box, Snackbar } from \"@material-ui/core\";\n\nimport { memo, useEffect, useState } from \"react\";\nimport { CurrencySelector } from \"./CurrencySelector\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { OperandInput } from \"./atoms/OperandInput\";\nimport { useCurrencyConvertor } from \"../hooks/useCurrencyConvertor\";\nimport { OperationMode } from \"../types\";\nimport { OperationModeArrowIcon } from \"./atoms/OperationModeArrowIcon\";\n\nexport const ConversionBox: React.FC = memo(() => {\n  const [leftOperand, setLeftOperand] = useState<string>();\n  const [rightOperand, setRightOperand] = useState<string>();\n  const [leftCurrency, setLeftCurrency] = useState<string>();\n  const [rightCurrency, setRightCurrency] = useState<string>();\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n  const [operationMode, setOperationMode] = useState<OperationMode>(\n    OperationMode.Forward\n  );\n  const amount =\n    operationMode === OperationMode.Forward ? leftOperand : rightOperand;\n  const { result, withError } = useCurrencyConvertor(\n    operationMode === OperationMode.Forward ? leftCurrency : rightCurrency,\n    operationMode === OperationMode.Forward ? rightCurrency : leftCurrency,\n    Number(amount)\n  );\n  const [printedResult,setPrintedResult] = useState<number | null>(null);\n\n  useEffect(() => {\n    setPrintedResult(result);\n  },[result])\n\n  //Assign result value according to the operation mode\n  useEffect(() => {\n    if (!printedResult) {\n      return;\n    }\n    const fixedResult = printedResult.toFixed(3);\n    if (operationMode === OperationMode.Forward) {\n      setRightOperand(fixedResult);\n    } else {\n      setLeftOperand(fixedResult);\n    }\n  }, [printedResult,operationMode]);\n\n  //Check for inputs errors (ignore them if any operand was cleaned up)\n  useEffect(() => {\n    if (!leftOperand || !rightOperand) {\n      setShowAlert(false);\n      return;\n    }\n    if (withError) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [withError, leftOperand, rightOperand]);\n\n  return (\n    <>\n      <Box display=\"flex\">\n        {/* LEFT  OPERAND */}\n        <OperandInput\n          error={showAlert}\n          value={leftOperand ?? \"\"}\n          onChange={(event) => {\n            setLeftOperand(event.target.value);\n          }}\n          onKeyDown={() => {\n            setPrintedResult(null);\n            setOperationMode(OperationMode.Forward);\n          }}\n          label={operationMode === OperationMode.Forward ? \"From\" : \"To\"}\n        />\n        <Box marginLeft={1}>\n          <CurrencySelector\n            onChange={(event, value) => {\n              setLeftCurrency(value ?? \"\");\n            }}\n          />\n        </Box>\n        {/**/}\n\n        <Box marginLeft={1} marginRight={1}>\n          <OperationModeArrowIcon\n            error={showAlert}\n            operationMode={operationMode}\n          />\n        </Box>\n\n        {/* RIGHT  OPERAND */}\n        <Box marginRight={1}>\n          <CurrencySelector\n            onChange={(event, value) => {\n              setRightCurrency(value ?? \"\");\n            }}\n          />\n        </Box>\n        <OperandInput\n          error={showAlert}\n          value={rightOperand ?? \"\"}\n          onChange={(event) => {\n            setRightOperand(event.target.value);\n          }}\n          onKeyDown={() => {\n            setPrintedResult(null);\n            setOperationMode(OperationMode.Backward);\n          }}\n          label={operationMode === OperationMode.Forward ? \"To\" : \"From\"}\n        />\n        {/**/}\n      </Box>\n\n      <Snackbar open={showAlert}>\n        <Alert severity=\"error\">Invalid input!</Alert>\n      </Snackbar>\n    </>\n  );\n});\n","import {\n  Box,\n  Divider,\n  IconButton,\n  AppBar,\n  Toolbar,\n  IconButtonProps,\n} from \"@material-ui/core\";\nimport { ConversionBox } from \"./components/ConversionBox\";\nimport ControlPointIcon from \"@material-ui/icons/ControlPoint\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { green } from \"@material-ui/core/colors\";\nimport { memo, useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst RemoveConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        color=\"secondary\"\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <RemoveCircleIcon />\n      </IconButton>\n    );\n  }\n);\n\nconst AddConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        style={{ color: green[600] }}\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <ControlPointIcon />\n      </IconButton>\n    );\n  }\n);\n\nconst queryClient = new QueryClient();\nconst App = () => {\n  const [conversionBoxIndexes, setConversionBoxIndexes] = useState<number[]>([\n    0, // we have at least 1 box\n  ]);\n  const isThereMoreThanOneBox = conversionBoxIndexes.length > 1;\n\n  const addConvertionBox = () => {\n    setConversionBoxIndexes((conversionBoxIndexes) => [\n      ...conversionBoxIndexes,\n      conversionBoxIndexes[conversionBoxIndexes.length - 1] + 1,\n    ]);\n  };\n\n  const removeConvertionBox = (indexToRemove: number) => () => {\n    setConversionBoxIndexes((conversionBoxIndexes) =>\n      conversionBoxIndexes.filter((index) => index !== indexToRemove)\n    );\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppBar position=\"fixed\">\n        <Toolbar>Ultimate Currency Convertor</Toolbar>\n      </AppBar>\n\n      <Box margin=\"auto\" padding={10} width=\"max-content\">\n        {conversionBoxIndexes.map((convertionBoxIndex) => (\n          <Box key={convertionBoxIndex} paddingBottom={1} display=\"flex\">\n            <ConversionBox />\n            {isThereMoreThanOneBox && (\n              <RemoveConversionBoxButton\n                onClick={removeConvertionBox(convertionBoxIndex)}\n              />\n            )}\n          </Box>\n        ))}\n\n        <Divider />\n\n        <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\n          <AddConversionBoxButton onClick={addConvertionBox} />\n        </Box>\n      </Box>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}