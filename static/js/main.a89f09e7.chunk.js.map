{"version":3,"sources":["types.ts","components/atoms/OperandInput.tsx","components/atoms/OperationModeArrowIcon.tsx","components/atoms/CurrencySelector.tsx","components/atoms/DatePicker.tsx","components/atoms/ShowChartsButton.tsx","hooks/useTimeSeriesData.ts","molecules/TimeSeriesChart.tsx","components/organisms/DialogTimeSeries.tsx","hooks/useRatesData.ts","hooks/useCurrencyConverter.ts","components/templates/ConversionBox.tsx","components/pages/CurrenciesConverter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OperationMode","OperandInput","props","TextField","InputLabelProps","shrink","variant","useStyles","makeStyles","theme","root","padding","spacing","withError","color","red","NoError","green","OperationModeArrowIcon","operationMode","error","classes","className","clsx","Forward","ArrowForward","ArrowBack","CurrencySelector","Autocomplete","style","width","options","Object","keys","currencies","renderInput","params","label","DatePicker","disableToolbar","autoOk","format","margin","maxDate","Date","id","ShowChartsButton","IconButton","background","size","TrendingUp","fetchTimeSeries","a","queryKey","firstCurrency","secondCurrency","convertionDate","join","startDate","subDays","endDate","isSaturday","isSunday","fetch","response","json","TimeSeriesChart","data","query","useQuery","refetchOnWindowFocus","refetchOnMount","staleTime","useState","setData","useEffect","newHistoricalData","price","map","date","ratio","useTimeSeriesData","ResponsiveContainer","height","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","DialogTimeSeries","DialogProps","leftCurrency","rightCurrency","Dialog","fullScreen","aria-labelledby","DialogTitle","DialogContent","API_KEY","fetchRates","currenciesMerged","today","endpoint","isEqual","useCurrencyConverter","fromCurrency","toCurrency","amount","result","setResult","setWithError","ratesPool","ratesMap","setRatesMap","ratesUniquePair","setRatesUniquePair","sort","getCurrenciesPairKey","currenciesPair","rates","useMemo","useRatesData","useDebounce","ConversionBox","memo","leftOperand","setLeftOperand","rightOperand","setRightOperand","setLeftCurrency","setRightCurrency","setConvertionDate","isHistoricalDialogOpen","setIsHistoricalDialogOpen","printedResult","setPrintedResult","showAlert","setShowAlert","setOperationMode","getSourceAmount","getSourceCurrency","getGoalCurrency","Number","fixedResult","toFixed","Box","marginBottom","display","alignContent","value","onChange","paddingLeft","marginTop","disabled","onClick","event","target","onKeyDown","marginLeft","marginRight","Backward","open","onClose","Snackbar","Alert","severity","CurrenciesConverter","conversionBoxIndexes","setConversionBoxIndexes","isThereMoreThanOneBox","length","convertionBoxIndex","index","paddingTop","paddingBottom","RemoveConversionBoxButton","indexToRemove","filter","Divider","justifyContent","AddConversionBoxButton","aria-label","RemoveCircle","ControlPoint","queryClient","QueryClient","App","QueryClientProvider","client","utils","DateFnsUtils","AppBar","position","Toolbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a89f09e7.chunk.js","sourcesContent":["export enum OperationMode {\n  Forward = \"forward\", //left to right convertion operation\n  Backward = \"backward\", //right to left convertion operation\n}\nexport type Rates = Record<string, number>;\n","import { TextField, TextFieldProps } from \"@material-ui/core\";\n\nexport const OperandInput = (props: TextFieldProps) => {\n  return (\n    <TextField\n      {...props}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n    />\n  );\n};\n","import clsx from \"clsx\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nimport { OperationMode } from \"../../types\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1.5),\n  },\n  withError: {\n    color: red[600],\n  },\n  NoError: {\n    color: green[600],\n  },\n}));\n\ntype OperationModeArrowIconProps = {\n  operationMode: OperationMode;\n  error: Boolean;\n};\nexport const OperationModeArrowIcon: React.FC<OperationModeArrowIconProps> = ({\n  operationMode,\n  error,\n}) => {\n  const classes = useStyles(error);\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        error ? classes.withError : classes.NoError\n      )}\n    >\n      {operationMode === OperationMode.Forward ? (\n        <ArrowForward />\n      ) : (\n        <ArrowBack />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-use-before-define */\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { AutocompleteProps } from \"@material-ui/lab/Autocomplete\";\nimport currencies from \"../../currencies.json\";\n\nexport const CurrencySelector = (\n  props: Partial<AutocompleteProps<string, false, false, false>>\n) => {\n  return (\n    <Autocomplete\n      {...props}\n      style={{ width: 300 }}\n      options={Object.keys(currencies)}\n      renderInput={(params: any) => (\n        <TextField {...params} label=\"Choose a Currency\" variant=\"outlined\" />\n      )}\n    />\n  );\n};\n","import {\n  KeyboardDatePicker,\n  KeyboardDatePickerProps,\n} from \"@material-ui/pickers\";\n\nexport const DatePicker = (props: KeyboardDatePickerProps) => {\n  return (\n    <KeyboardDatePicker\n      {...props}\n      disableToolbar\n      autoOk={true}\n      variant=\"inline\"\n      format=\"dd/MM/yyyy\"\n      margin=\"normal\"\n      maxDate={new Date()}\n      id=\"date-picker-inline\"\n      label=\"Convertion Date\"\n    />\n  );\n};\n","import { IconButton, IconButtonProps } from \"@material-ui/core\";\nimport { TrendingUp } from \"@material-ui/icons\";\n\nexport const ShowChartsButton = (props: IconButtonProps) => {\n  return (\n    <IconButton\n      {...props}\n      style={{ background: \"rgb(0 0 0 / 14%)\" }}\n      size=\"small\"\n    >\n      <TrendingUp />\n    </IconButton>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\nimport { format, isSaturday, isSunday, subDays } from \"date-fns\";\n\nconst API_KEY = \"H89XCTMcishFM3lKnZKl\";\n\ntype HistoricalRates = {\n  [date: string]: {\n    [currencies: string]: {\n      close: number;\n    };\n  };\n};\n\ntype HistorialRatios = {\n  date: string;\n  ratio: number;\n};\n\nconst fetchTimeSeries: QueryFunction = async ({ queryKey }) => {\n  const firstCurrency = queryKey[1] as string;\n  const secondCurrency = queryKey[2] as string;\n  const convertionDate = queryKey[3] as Date;\n  const currencies = [firstCurrency, secondCurrency].join(\"\");\n\n  let startDate = subDays(convertionDate, 60);\n  let endDate = convertionDate;\n\n  //This API doesnt work if the start_date or end_date is a weekend\n  while (isSaturday(startDate) || isSunday(startDate)) {\n    startDate = subDays(startDate, 1);\n  }\n  while (isSaturday(endDate) || isSunday(endDate)) {\n    endDate = subDays(endDate, 1);\n  }\n\n  const response = await fetch(\n    `https://fxmarketapi.com/apitimeseries?api_key=${API_KEY}&currency=${currencies}&start_date=${format(\n      startDate,\n      \"yyyy-MM-dd\"\n    )}&end_date=${format(endDate, \"yyyy-MM-dd\")}`\n  );\n  return await response.json();\n};\n\nexport const useTimeSeriesData = (\n  firstCurrency: string,\n  secondCurrency: string,\n  convertionDate: Date\n) => {\n  const query = useQuery(\n    [\n      `rates-${firstCurrency}-${secondCurrency}-${convertionDate}`,\n      firstCurrency,\n      secondCurrency,\n      convertionDate,\n    ],\n    fetchTimeSeries,\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      staleTime: 60,\n    }\n  );\n  const [data, setData] = useState<HistorialRatios[] | null>(null);\n\n  useEffect(() => {\n    const data = query.data as Record<\"price\", HistoricalRates> | undefined;\n    if (!data) {\n      return;\n    }\n    const currencies = [firstCurrency, secondCurrency].join(\"\");\n    const newHistoricalData = Object.keys(data.price).map((date: string) => {\n      return {\n        date,\n        ratio: data.price[date][currencies][\"close\"],\n      };\n    });\n    setData(newHistoricalData);\n  }, [query.data, firstCurrency, secondCurrency]);\n\n  return data;\n};\n","import {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { useTimeSeriesData } from \"../hooks/useTimeSeriesData\";\n\ntype TimeSeriesChartProps = {\n  firstCurrency: string;\n  secondCurrency: string;\n  convertionDate: Date;\n};\nexport const TimeSeriesChart: React.FC<TimeSeriesChartProps> = ({\n  firstCurrency,\n  secondCurrency,\n  convertionDate,\n}) => {\n  const data = useTimeSeriesData(firstCurrency, secondCurrency, convertionDate);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"ratio\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import {\n  Dialog,\n  DialogContent,\n  DialogProps,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport { TimeSeriesChart } from \"../../molecules/TimeSeriesChart\";\nimport { OperationMode } from \"../../types\";\n\ntype DialogTimeSeriesProps = {\n  DialogProps: DialogProps;\n  leftCurrency: string;\n  rightCurrency: string;\n  operationMode: OperationMode;\n  convertionDate: Date;\n};\nexport const DialogTimeSeries: React.FC<DialogTimeSeriesProps> = ({\n  DialogProps,\n  leftCurrency,\n  rightCurrency,\n  operationMode,\n  convertionDate,\n}) => {\n  const firstCurrency =\n    operationMode === OperationMode.Forward ? leftCurrency : rightCurrency;\n  const secondCurrency =\n    operationMode === OperationMode.Forward ? rightCurrency : leftCurrency;\n  return (\n    <Dialog\n      fullScreen\n      aria-labelledby=\"currency-history-dialog\"\n      {...DialogProps}\n    >\n      <DialogTitle id=\"customized-dialog-title\">\n        {`Convertion Historical Data: ${firstCurrency} - ${secondCurrency} (last 60 days)`}\n      </DialogTitle>\n      <DialogContent>\n        <TimeSeriesChart\n          firstCurrency={firstCurrency}\n          secondCurrency={secondCurrency}\n          convertionDate={convertionDate}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\nimport { format, isEqual } from \"date-fns\";\n\nimport { Rates } from \"../types\";\n\ntype RatesPool = { [convertionPair: string]: Rates };\n\n// const API_KEY = \"9b923c95528b39f1055b1e4187a62a58\";\nconst API_KEY = \"c266944752f24393afe3cf6f9fde2f3a\";\n\nconst fetchRates: QueryFunction = async ({ queryKey }) => {\n  const currenciesMerged = queryKey[1] as string;\n  const convertionDate = queryKey[2] as Date;\n  if (!currenciesMerged) {\n    return;\n  }\n  const today = new Date();\n\n  const endpoint = isEqual(convertionDate, today)\n    ? `https://openexchangerates.org/api/latest.json?app_id=${API_KEY}&symbols=${currenciesMerged}`\n    : `https://openexchangerates.org/api/historical/${format(\n        convertionDate,\n        \"yyyy-MM-dd\"\n      )}.json?app_id=${API_KEY}&symbols=${currenciesMerged}`;\n\n  const response = await fetch(endpoint);\n  return await response.json();\n};\n\nconst getCurrenciesPairKey = (\n  fromCurrency: string,\n  toCurrency: string,\n  sorted: boolean = false\n) => {\n  const currencies = [fromCurrency, toCurrency];\n  return sorted ? currencies.sort().join(\",\") : currencies.join(\",\");\n};\n\nexport const useRatesData = (\n  fromCurrency?: string,\n  toCurrency?: string,\n  convertionDate?: Date\n): RatesPool | null => {\n  const [ratesMap, setRatesMap] = useState<RatesPool | null>(null);\n  const [ratesUniquePair, setRatesUniquePair] = useState<string>(\"\");\n  const query = useQuery(\n    [\n      `rates-${ratesUniquePair}-${convertionDate}`,\n      ratesUniquePair,\n      convertionDate,\n    ],\n    fetchRates,\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      staleTime: 60,\n    }\n  );\n\n  useEffect(() => {\n    if (!fromCurrency || !toCurrency) {\n      return;\n    }\n    setRatesUniquePair(getCurrenciesPairKey(fromCurrency, toCurrency, true));\n  }, [fromCurrency, toCurrency]);\n\n  useEffect(() => {\n    const currenciesPair = `${fromCurrency}-${toCurrency}`;\n    const data = query.data as Record<\"rates\", Rates> | undefined;\n\n    if (!data) {\n      return;\n    }\n\n    setRatesMap((ratesMap) => ({ ...ratesMap, [currenciesPair]: data.rates }));\n  }, [query.data, fromCurrency, toCurrency]);\n\n  return useMemo(() => ratesMap, [ratesMap]);\n};\n","import { useState } from \"react\";\nimport { useDebounce } from \"react-use\";\n\nimport { useRatesData } from \"./useRatesData\";\n\nconst DEBOUNCE_DELAY_MS = 300;\n\nexport const useCurrencyConverter = (\n  fromCurrency?: string,\n  toCurrency?: string,\n  convertionDate?: Date,\n  amount?: number\n): { result: number | null; withError: boolean } => {\n  const [result, setResult] = useState<number | null>(null);\n  const [withError, setWithError] = useState<boolean>(false);\n  const ratesPool = useRatesData(fromCurrency, toCurrency, convertionDate);\n\n  useDebounce(\n    () => {\n      if (!amount) {\n        setWithError(true);\n        return;\n      }\n\n      if (!ratesPool) {\n        return;\n      }\n\n      const rates = ratesPool[`${fromCurrency}-${toCurrency}`];\n\n      if (!rates || !toCurrency || !fromCurrency) {\n        return;\n      }\n\n      setResult((rates[toCurrency] * amount) / rates[fromCurrency]);\n      setWithError(false);\n    },\n    DEBOUNCE_DELAY_MS,\n    [amount, fromCurrency, toCurrency, ratesPool]\n  );\n\n  return { result, withError };\n};\n","import { memo, useEffect, useState } from \"react\";\n\nimport { Box, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n\nimport { OperandInput } from \"../atoms/OperandInput\";\nimport { OperationModeArrowIcon } from \"../atoms/OperationModeArrowIcon\";\nimport { CurrencySelector } from \"../atoms/CurrencySelector\";\nimport { DatePicker } from \"../atoms/DatePicker\";\nimport { ShowChartsButton } from \"../atoms/ShowChartsButton\";\nimport { DialogTimeSeries } from \"../organisms/DialogTimeSeries\";\nimport { useCurrencyConverter } from \"../../hooks/useCurrencyConverter\";\nimport { OperationMode } from \"../../types\";\n\nexport const ConversionBox: React.FC = memo(() => {\n  const [leftOperand, setLeftOperand] = useState<string>();\n  const [rightOperand, setRightOperand] = useState<string>();\n  const [leftCurrency, setLeftCurrency] = useState<string>();\n  const [rightCurrency, setRightCurrency] = useState<string>();\n  const [convertionDate, setConvertionDate] = useState(new Date());\n  const [isHistoricalDialogOpen, setIsHistoricalDialogOpen] = useState(false);\n  const [printedResult, setPrintedResult] = useState<number | null>(null);\n  const [showAlert, setShowAlert] = useState(false);\n  const [operationMode, setOperationMode] = useState(OperationMode.Forward);\n\n  const amount = getSourceAmount(leftOperand, rightOperand, operationMode);\n  const { result, withError } = useCurrencyConverter(\n    getSourceCurrency(leftCurrency, rightCurrency, operationMode),\n    getGoalCurrency(leftCurrency, rightCurrency, operationMode),\n    convertionDate,\n    Number(amount)\n  );\n\n  useEffect(() => {\n    setPrintedResult(result);\n  }, [result]);\n\n  //Assign result value according to the operation mode\n  useEffect(() => {\n    if (!printedResult) {\n      return;\n    }\n    const fixedResult = printedResult.toFixed(3);\n    if (operationMode === OperationMode.Forward) {\n      setRightOperand(fixedResult);\n    } else {\n      setLeftOperand(fixedResult);\n    }\n  }, [printedResult, operationMode]);\n\n  //Check for inputs errors (ignore them if any operand was cleaned up)\n  useEffect(() => {\n    if (!leftOperand || !rightOperand) {\n      setShowAlert(false);\n      return;\n    }\n    if (withError) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [withError, leftOperand, rightOperand]);\n\n  const onDateChange = (date: MaterialUiPickersDate) => {\n    setConvertionDate(date as Date);\n  };\n\n  const onDialogClose = () => {\n    setIsHistoricalDialogOpen(false);\n  };\n\n  return (\n    <>\n      <div>\n        <Box marginBottom={1} display=\"flex\" alignContent=\"center\">\n          <DatePicker value={convertionDate} onChange={onDateChange} />\n          <Box paddingLeft={2} marginTop={4}>\n            <ShowChartsButton\n              disabled={!leftCurrency || !rightCurrency}\n              onClick={() => {\n                setIsHistoricalDialogOpen(true);\n              }}\n            />\n          </Box>\n        </Box>\n\n        <Box display=\"flex\">\n          {/* LEFT  OPERAND */}\n          <OperandInput\n            error={showAlert}\n            value={leftOperand ?? \"\"}\n            onChange={(event) => {\n              setLeftOperand(event.target.value);\n            }}\n            onKeyDown={() => {\n              setPrintedResult(null);\n              setOperationMode(OperationMode.Forward);\n            }}\n            label={operationMode === OperationMode.Forward ? \"From\" : \"To\"}\n          />\n          <Box marginLeft={1}>\n            <CurrencySelector\n              onChange={(event, value) => {\n                setLeftCurrency(value ?? \"\");\n              }}\n            />\n          </Box>\n          {/**/}\n\n          <Box marginLeft={1} marginRight={1}>\n            <OperationModeArrowIcon\n              error={showAlert}\n              operationMode={operationMode}\n            />\n          </Box>\n\n          {/* RIGHT  OPERAND */}\n          <Box marginRight={1}>\n            <CurrencySelector\n              onChange={(event, value) => {\n                setRightCurrency(value ?? \"\");\n              }}\n            />\n          </Box>\n          <OperandInput\n            error={showAlert}\n            value={rightOperand ?? \"\"}\n            onChange={(event) => {\n              setRightOperand(event.target.value);\n            }}\n            onKeyDown={() => {\n              setPrintedResult(null);\n              setOperationMode(OperationMode.Backward);\n            }}\n            label={operationMode === OperationMode.Forward ? \"To\" : \"From\"}\n          />\n          {/**/}\n        </Box>\n      </div>\n\n      {!!leftCurrency && !!rightCurrency && (\n        <DialogTimeSeries\n          leftCurrency={leftCurrency}\n          rightCurrency={rightCurrency}\n          convertionDate={convertionDate}\n          operationMode={operationMode}\n          DialogProps={{ open: isHistoricalDialogOpen, onClose: onDialogClose }}\n        />\n      )}\n\n      <Snackbar open={showAlert}>\n        <Alert severity=\"error\">Invalid amount!</Alert>\n      </Snackbar>\n    </>\n  );\n});\n\nconst getSourceAmount = (\n  leftOperand?: string,\n  rightOperand?: string,\n  operationMode?: OperationMode\n) => (operationMode === OperationMode.Forward ? leftOperand : rightOperand);\n\nconst getSourceCurrency = (\n  leftCurrency?: string,\n  rightCurrency?: string,\n  operationMode?: OperationMode\n) => (operationMode === OperationMode.Forward ? leftCurrency : rightCurrency);\n\nconst getGoalCurrency = (\n  leftCurrency?: string,\n  rightCurrency?: string,\n  operationMode?: OperationMode\n) => (operationMode === OperationMode.Forward ? rightCurrency : leftCurrency);\n","import { memo, useState } from \"react\";\n\nimport { Box, Divider, IconButton, IconButtonProps } from \"@material-ui/core\";\nimport { ControlPoint, RemoveCircle } from \"@material-ui/icons\";\nimport { green } from \"@material-ui/core/colors\";\n\nimport { ConversionBox } from \"../templates/ConversionBox\";\n\nexport const CurrenciesConverter = () => {\n  const [conversionBoxIndexes, setConversionBoxIndexes] = useState<number[]>([\n    0, //at least 1 box\n  ]);\n  const isThereMoreThanOneBox = conversionBoxIndexes.length > 1;\n\n  const addConversionBox = () => {\n    setConversionBoxIndexes((conversionBoxIndexes) => [\n      ...conversionBoxIndexes,\n      conversionBoxIndexes[conversionBoxIndexes.length - 1] + 1,\n    ]);\n  };\n\n  const removeConversionBox = (indexToRemove: number) => () => {\n    setConversionBoxIndexes((conversionBoxIndexes) =>\n      conversionBoxIndexes.filter((index) => index !== indexToRemove)\n    );\n  };\n\n  return (\n    <Box margin=\"auto\" padding={10} width=\"max-content\">\n      {conversionBoxIndexes.map((convertionBoxIndex, index) => (\n        <>\n          <Box\n            key={convertionBoxIndex}\n            paddingTop={1}\n            paddingBottom={1}\n            display=\"flex\"\n          >\n            <ConversionBox />\n            {isThereMoreThanOneBox && (\n              <RemoveConversionBoxButton\n                onClick={removeConversionBox(convertionBoxIndex)}\n              />\n            )}\n          </Box>\n\n          {index !== conversionBoxIndexes.length - 1 && <Divider />}\n        </>\n      ))}\n\n      <Divider />\n\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\n        <AddConversionBoxButton onClick={addConversionBox} />\n      </Box>\n    </Box>\n  );\n};\n\nconst RemoveConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        color=\"secondary\"\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n);\n\nconst AddConversionBoxButton = memo(\n  ({ onClick, ...props }: IconButtonProps) => {\n    return (\n      <IconButton\n        style={{ color: green[600] }}\n        onClick={onClick}\n        aria-label=\"remove-convertion-box\"\n        {...props}\n      >\n        <ControlPoint />\n      </IconButton>\n    );\n  }\n);\n","import { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport { AppBar, Toolbar } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport { CurrenciesConverter } from \"./components/pages/CurrenciesConverter\";\n\nconst queryClient = new QueryClient();\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <AppBar position=\"fixed\">\n          <Toolbar>Ultimate Currency Converter 🚀</Toolbar>\n        </AppBar>\n        <CurrenciesConverter />\n      </MuiPickersUtilsProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}