{"version":3,"sources":["types.ts","components/atoms/OperandInput.tsx","components/atoms/OperationModeArrowIcon.tsx","hooks/useCurrenciesData.ts","components/atoms/CurrencySelector.tsx","components/atoms/DatePicker.tsx","components/atoms/ShowChartsButton.tsx","components/atoms/RemoveButton.tsx","hooks/useTimeSeriesData.ts","molecules/TimeSeriesChart.tsx","utils.ts","components/organisms/DialogTimeSeries.tsx","hooks/useRatesData.ts","hooks/useCurrencyConverter.ts","components/templates/ConversionBox.tsx","components/atoms/AddButton.tsx","components/pages/CurrenciesConverter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OperationMode","OperandInput","props","TextField","InputLabelProps","shrink","variant","useStyles","makeStyles","theme","root","padding","spacing","withError","color","red","NoError","green","OperationModeArrowIcon","operationMode","error","classes","className","clsx","Forward","ArrowForward","ArrowBack","fetchCurrencies","a","fetch","response","json","CurrencySelector","currencies","useState","setCurrencies","query","useQuery","refetchOnWindowFocus","refetchOnMount","staleTime","useEffect","data","parsedCurrencies","Object","keys","map","currencyKey","key","name","useMemo","useCurrenciesData","Autocomplete","style","width","options","getOptionLabel","option","renderInput","params","label","DatePicker","disableToolbar","autoOk","format","margin","maxDate","Date","minDate","subYears","id","ShowChartsButton","IconButton","background","size","TrendingUp","RemoveButton","memo","onClick","aria-label","RemoveCircle","fetchTimeSeries","queryKey","firstCurrency","secondCurrency","convertionDate","join","startDate","subDays","endDate","isSaturday","isSunday","process","TimeSeriesChart","setData","newHistoricalData","price","date","rate","useTimeSeriesData","Box","height","ResponsiveContainer","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","getSourceCurrency","leftCurrency","rightCurrency","getGoalCurrency","DialogTimeSeries","DialogProps","Dialog","fullWidth","maxWidth","aria-labelledby","DialogTitle","DialogContent","fetchRates","currenciesMerged","today","endpoint","isEqual","useCurrencyConverter","fromCurrency","toCurrency","amount","result","setResult","setWithError","ratesPool","ratesMap","setRatesMap","ratesUniquePair","setRatesUniquePair","sort","getCurrenciesPairKey","currenciesPair","rates","useRatesData","useDebounce","ConversionBox","removeEnabled","onRemove","leftOperand","setLeftOperand","rightOperand","setRightOperand","setLeftCurrency","setRightCurrency","setConvertionDate","isHistoricalDialogOpen","setIsHistoricalDialogOpen","printedResult","setPrintedResult","showAlert","setShowAlert","setOperationMode","getSourceAmount","Number","fixedResult","toFixed","marginBottom","display","alignContent","value","onChange","paddingLeft","marginTop","disabled","event","target","onKeyDown","marginLeft","marginRight","Backward","open","onClose","Snackbar","Alert","severity","AddButton","ControlPoint","CurrenciesConverter","conversionBoxIndexes","setConversionBoxIndexes","isThereMoreThanOneBox","length","convertionBoxIndex","index","paddingTop","paddingBottom","indexToRemove","filter","Divider","justifyContent","queryClient","QueryClient","App","QueryClientProvider","client","utils","DateFnsUtils","AppBar","position","Toolbar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.406623a2.chunk.js","sourcesContent":["export enum OperationMode {\n  Forward = \"forward\", //left to right convertion operation\n  Backward = \"backward\", //right to left convertion operation\n}\nexport type Rates = Record<string, number>;\n\nexport type Currency = {\n  name: string;\n  key: string;\n};\n","import { TextField, TextFieldProps } from \"@material-ui/core\";\n\nexport const OperandInput = (props: TextFieldProps) => {\n  return (\n    <TextField\n      {...props}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n    />\n  );\n};\n","import clsx from \"clsx\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { green, red } from \"@material-ui/core/colors\";\n\nimport { OperationMode } from \"../../types\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1.5),\n  },\n  withError: {\n    color: red[600],\n  },\n  NoError: {\n    color: green[600],\n  },\n}));\n\ntype OperationModeArrowIconProps = {\n  operationMode: OperationMode;\n  error: Boolean;\n};\nexport const OperationModeArrowIcon: React.FC<OperationModeArrowIconProps> = ({\n  operationMode,\n  error,\n}) => {\n  const classes = useStyles(error);\n  return (\n    <div\n      className={clsx(\n        classes.root,\n        error ? classes.withError : classes.NoError\n      )}\n    >\n      {operationMode === OperationMode.Forward ? (\n        <ArrowForward />\n      ) : (\n        <ArrowBack />\n      )}\n    </div>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\n\nimport { Currency } from \"../types\";\n\ntype CurrenciesAPIFormat = Record<string, string>;\n\nconst fetchCurrencies: QueryFunction = async () => {\n  const response = await fetch(\n    `https://openexchangerates.org/api/currencies.json`\n  );\n  return await response.json();\n};\n\nexport const useCurrenciesData = (): Currency[] | null => {\n  const [currencies, setCurrencies] = useState<Currency[] | null>(null);\n  const query = useQuery(\"currencies\", fetchCurrencies, {\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    staleTime: 60,\n  });\n\n  useEffect(() => {\n    const data = query.data as CurrenciesAPIFormat | undefined;\n\n    if (!data) {\n      return;\n    }\n\n    const parsedCurrencies = Object.keys(data).map((currencyKey) => ({\n      key: currencyKey,\n      name: data[currencyKey],\n    }));\n\n    setCurrencies(parsedCurrencies);\n  }, [query.data]);\n\n  return useMemo(() => currencies, [currencies]);\n};\n","/* eslint-disable no-use-before-define */\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { AutocompleteProps } from \"@material-ui/lab/Autocomplete\";\n\nimport { useCurrenciesData } from \"../../hooks/useCurrenciesData\";\nimport { Currency } from \"../../types\";\n\nexport const CurrencySelector = (\n  props: Partial<AutocompleteProps<Currency, false, false, false>>\n) => {\n  const currencies = useCurrenciesData();\n  return (\n    <Autocomplete\n      {...props}\n      style={{ width: 300 }}\n      options={currencies ?? []}\n      getOptionLabel={(option) => option.name}\n      renderInput={(params: any) => (\n        <TextField {...params} label=\"Choose a Currency\" variant=\"outlined\" />\n      )}\n    />\n  );\n};\n","import { subYears } from \"date-fns\";\nimport {\n  KeyboardDatePicker,\n  KeyboardDatePickerProps,\n} from \"@material-ui/pickers\";\n\nexport const DatePicker = (props: KeyboardDatePickerProps) => {\n  return (\n    <KeyboardDatePicker\n      {...props}\n      disableToolbar\n      autoOk={true}\n      variant=\"inline\"\n      format=\"dd/MM/yyyy\"\n      margin=\"normal\"\n      maxDate={new Date()}\n      minDate={subYears(new Date(), 10)}\n      id=\"date-picker-inline\"\n      label=\"Convertion Date\"\n    />\n  );\n};\n","import { IconButton, IconButtonProps } from \"@material-ui/core\";\nimport { TrendingUp } from \"@material-ui/icons\";\n\nexport const ShowChartsButton = (props: IconButtonProps) => {\n  return (\n    <IconButton\n      {...props}\n      style={{ background: \"rgb(0 0 0 / 14%)\" }}\n      size=\"small\"\n    >\n      <TrendingUp />\n    </IconButton>\n  );\n};\n","import { memo } from \"react\";\n\nimport { IconButton, IconButtonProps } from \"@material-ui/core\";\nimport { RemoveCircle } from \"@material-ui/icons\";\n\nexport const RemoveButton = memo(({ onClick, ...props }: IconButtonProps) => {\n  return (\n    <IconButton\n      {...props}\n      color=\"secondary\"\n      onClick={onClick}\n      aria-label=\"remove-convertion-box\"\n      size=\"small\"\n    >\n      <RemoveCircle />\n    </IconButton>\n  );\n});\n","import { useEffect, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\nimport { format, isSaturday, isSunday, subDays } from \"date-fns\";\n\ntype HistoricalRates = {\n  [date: string]: {\n    [currencies: string]: {\n      close: number;\n    };\n  };\n};\n\ntype HistorialRates = {\n  date: string;\n  rate: number;\n};\n\nconst fetchTimeSeries: QueryFunction = async ({ queryKey }) => {\n  const firstCurrency = queryKey[1] as string;\n  const secondCurrency = queryKey[2] as string;\n  const convertionDate = queryKey[3] as Date;\n  const currencies = [firstCurrency, secondCurrency].join(\"\");\n\n  let startDate = subDays(convertionDate, 60);\n  let endDate = convertionDate;\n\n  //This API doesnt work if the start_date or end_date is a weekend\n  while (isSaturday(startDate) || isSunday(startDate)) {\n    startDate = subDays(startDate, 1);\n  }\n  while (isSaturday(endDate) || isSunday(endDate)) {\n    endDate = subDays(endDate, 1);\n  }\n\n  const response = await fetch(\n    `https://fxmarketapi.com/apitimeseries?api_key=${\n      process.env.REACT_APP_FXMARKET_API_KEY\n    }&currency=${currencies}&start_date=${format(\n      startDate,\n      \"yyyy-MM-dd\"\n    )}&end_date=${format(endDate, \"yyyy-MM-dd\")}`\n  );\n  return await response.json();\n};\n\nexport const useTimeSeriesData = (\n  firstCurrency: string,\n  secondCurrency: string,\n  convertionDate: Date\n) => {\n  const query = useQuery(\n    [\n      `rates-${firstCurrency}-${secondCurrency}-${convertionDate}`,\n      firstCurrency,\n      secondCurrency,\n      convertionDate,\n    ],\n    fetchTimeSeries,\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      staleTime: 60,\n    }\n  );\n  const [data, setData] = useState<HistorialRates[] | null>(null);\n\n  useEffect(() => {\n    const data = query.data as Record<\"price\", HistoricalRates> | undefined;\n    if (!data) {\n      return;\n    }\n    const currencies = [firstCurrency, secondCurrency].join(\"\");\n    const newHistoricalData = Object.keys(data.price).map((date: string) => {\n      return {\n        date,\n        rate: data.price[date][currencies][\"close\"],\n      };\n    });\n    setData(newHistoricalData);\n  }, [query.data, firstCurrency, secondCurrency]);\n\n  return data;\n};\n","import { Box } from \"@material-ui/core\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { useTimeSeriesData } from \"../hooks/useTimeSeriesData\";\n\ntype TimeSeriesChartProps = {\n  firstCurrency: string;\n  secondCurrency: string;\n  convertionDate: Date;\n};\nexport const TimeSeriesChart: React.FC<TimeSeriesChartProps> = ({\n  firstCurrency,\n  secondCurrency,\n  convertionDate,\n}) => {\n  const data = useTimeSeriesData(firstCurrency, secondCurrency, convertionDate);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <Box height=\"400px\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"rate\"\n            name={`${firstCurrency}-${secondCurrency} Rate`}\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n","import { OperationMode } from \"./types\";\n\nexport const getSourceAmount = (\n  leftOperand: string,\n  rightOperand: string,\n  operationMode: OperationMode\n) => (operationMode === OperationMode.Forward ? leftOperand : rightOperand);\n\nexport const getSourceCurrency = (\n  leftCurrency: string,\n  rightCurrency: string,\n  operationMode: OperationMode\n) => (operationMode === OperationMode.Forward ? leftCurrency : rightCurrency);\n\nexport const getGoalCurrency = (\n  leftCurrency: string,\n  rightCurrency: string,\n  operationMode: OperationMode\n) => (operationMode === OperationMode.Forward ? rightCurrency : leftCurrency);\n","import {\n  Dialog,\n  DialogContent,\n  DialogProps,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport { TimeSeriesChart } from \"../../molecules/TimeSeriesChart\";\nimport { OperationMode } from \"../../types\";\nimport { getGoalCurrency, getSourceCurrency } from \"../../utils\";\n\ntype DialogTimeSeriesProps = {\n  DialogProps: DialogProps;\n  leftCurrency: string;\n  rightCurrency: string;\n  operationMode: OperationMode;\n  convertionDate: Date;\n};\nexport const DialogTimeSeries: React.FC<DialogTimeSeriesProps> = ({\n  DialogProps,\n  leftCurrency,\n  rightCurrency,\n  operationMode,\n  convertionDate,\n}) => {\n  const firstCurrency = getSourceCurrency(\n    leftCurrency,\n    rightCurrency,\n    operationMode\n  );\n  const secondCurrency = getGoalCurrency(\n    leftCurrency,\n    rightCurrency,\n    operationMode\n  );\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"md\"\n      aria-labelledby=\"currency-history-dialog\"\n      {...DialogProps}\n    >\n      <DialogTitle id=\"customized-dialog-title\">\n        {`Historical ${firstCurrency}-${secondCurrency} Rates (60 days previous to convertion date, no weekends)`}\n      </DialogTitle>\n      <DialogContent>\n        <TimeSeriesChart\n          firstCurrency={firstCurrency}\n          secondCurrency={secondCurrency}\n          convertionDate={convertionDate}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { QueryFunction, useQuery } from \"react-query\";\nimport { format, isEqual } from \"date-fns\";\n\nimport { Rates } from \"../types\";\n\ntype RatesPool = { [convertionPair: string]: Rates };\n\nconst fetchRates: QueryFunction = async ({ queryKey }) => {\n  const currenciesMerged = queryKey[1] as string;\n  const convertionDate = queryKey[2] as Date;\n  if (!currenciesMerged) {\n    return;\n  }\n  const today = new Date();\n\n  const endpoint = isEqual(convertionDate, today)\n    ? `https://openexchangerates.org/api/latest.json?app_id=${process.env.REACT_APP_OPENEXCHANGE_API_KEY}&symbols=${currenciesMerged}`\n    : `https://openexchangerates.org/api/historical/${format(\n        convertionDate,\n        \"yyyy-MM-dd\"\n      )}.json?app_id=${\n        process.env.REACT_APP_OPENEXCHANGE_API_KEY\n      }&symbols=${currenciesMerged}`;\n\n  const response = await fetch(endpoint);\n  return await response.json();\n};\n\nconst getCurrenciesPairKey = (\n  fromCurrency: string,\n  toCurrency: string,\n  sorted: boolean = false\n) => {\n  const currencies = [fromCurrency, toCurrency];\n  return sorted ? currencies.sort().join(\",\") : currencies.join(\",\");\n};\n\nexport const useRatesData = (\n  fromCurrency: string,\n  toCurrency: string,\n  convertionDate: Date\n): RatesPool | null => {\n  const [ratesMap, setRatesMap] = useState<RatesPool | null>(null);\n  const [ratesUniquePair, setRatesUniquePair] = useState<string>(\"\");\n  const query = useQuery(\n    [\n      `rates-${ratesUniquePair}-${convertionDate}`,\n      ratesUniquePair,\n      convertionDate,\n    ],\n    fetchRates,\n    {\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      staleTime: 60,\n    }\n  );\n\n  useEffect(() => {\n    if (!fromCurrency || !toCurrency) {\n      return;\n    }\n    setRatesUniquePair(getCurrenciesPairKey(fromCurrency, toCurrency, true));\n  }, [fromCurrency, toCurrency]);\n\n  useEffect(() => {\n    const currenciesPair = `${fromCurrency}-${toCurrency}`;\n    const data = query.data as Record<\"rates\", Rates> | undefined;\n\n    if (!data) {\n      return;\n    }\n\n    setRatesMap((ratesMap) => ({ ...ratesMap, [currenciesPair]: data.rates }));\n  }, [query.data, fromCurrency, toCurrency]);\n\n  return useMemo(() => ratesMap, [ratesMap]);\n};\n","import { useState } from \"react\";\nimport { useDebounce } from \"react-use\";\n\nimport { useRatesData } from \"./useRatesData\";\n\nconst DEBOUNCE_DELAY_MS = 300;\n\nexport const useCurrencyConverter = (\n  fromCurrency: string,\n  toCurrency: string,\n  convertionDate: Date,\n  amount: number\n): { result: number | null; withError: boolean } => {\n  const [result, setResult] = useState<number | null>(null);\n  const [withError, setWithError] = useState<boolean>(false);\n  const ratesPool = useRatesData(fromCurrency, toCurrency, convertionDate);\n\n  useDebounce(\n    () => {\n      if (!amount) {\n        setWithError(true);\n        return;\n      }\n\n      if (!ratesPool) {\n        return;\n      }\n\n      const rates = ratesPool[`${fromCurrency}-${toCurrency}`];\n\n      if (!rates || !toCurrency || !fromCurrency) {\n        return;\n      }\n      setResult((rates[toCurrency] * amount) / rates[fromCurrency]);\n      setWithError(false);\n    },\n    DEBOUNCE_DELAY_MS,\n    [amount, fromCurrency, toCurrency, ratesPool]\n  );\n\n  return { result, withError };\n};\n","import { memo, useEffect, useState } from \"react\";\n\nimport { Box, Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n\nimport { OperandInput } from \"../atoms/OperandInput\";\nimport { OperationModeArrowIcon } from \"../atoms/OperationModeArrowIcon\";\nimport { CurrencySelector } from \"../atoms/CurrencySelector\";\nimport { DatePicker } from \"../atoms/DatePicker\";\nimport { ShowChartsButton } from \"../atoms/ShowChartsButton\";\nimport { RemoveButton } from \"../atoms/RemoveButton\";\nimport { DialogTimeSeries } from \"../organisms/DialogTimeSeries\";\nimport { useCurrencyConverter } from \"../../hooks/useCurrencyConverter\";\nimport { OperationMode } from \"../../types\";\nimport {\n  getGoalCurrency,\n  getSourceAmount,\n  getSourceCurrency,\n} from \"../../utils\";\n\ntype ConversionBoxProps = {\n  removeEnabled: boolean;\n  onRemove: () => void;\n};\nexport const ConversionBox: React.FC<ConversionBoxProps> = memo(\n  ({ removeEnabled, onRemove }) => {\n    const [leftOperand, setLeftOperand] = useState<string>(\"\");\n    const [rightOperand, setRightOperand] = useState<string>(\"\");\n    const [leftCurrency, setLeftCurrency] = useState<string>(\"\");\n    const [rightCurrency, setRightCurrency] = useState<string>(\"\");\n    const [convertionDate, setConvertionDate] = useState(new Date());\n    const [isHistoricalDialogOpen, setIsHistoricalDialogOpen] = useState(false);\n    const [printedResult, setPrintedResult] = useState<number | null>(null);\n    const [showAlert, setShowAlert] = useState(false);\n    const [operationMode, setOperationMode] = useState(OperationMode.Forward);\n\n    const amount = getSourceAmount(leftOperand, rightOperand, operationMode);\n    const { result, withError } = useCurrencyConverter(\n      getSourceCurrency(leftCurrency, rightCurrency, operationMode),\n      getGoalCurrency(leftCurrency, rightCurrency, operationMode),\n      convertionDate,\n      Number(amount)\n    );\n\n    useEffect(() => {\n      setPrintedResult(result);\n    }, [result]);\n\n    //Assign result value according to the operation mode\n    useEffect(() => {\n      if (!printedResult) {\n        return;\n      }\n      const fixedResult = printedResult.toFixed(3);\n      if (operationMode === OperationMode.Forward) {\n        setRightOperand(fixedResult);\n      } else {\n        setLeftOperand(fixedResult);\n      }\n    }, [printedResult, operationMode]);\n\n    //Check for inputs errors (ignore them if any operand was cleaned up)\n    useEffect(() => {\n      //if the user cleaned up any input it shouldn't show errors\n      if (!leftOperand || !rightOperand) {\n        setShowAlert(false);\n        return;\n      }\n      if (withError) {\n        setShowAlert(true);\n      } else {\n        setShowAlert(false);\n      }\n    }, [withError, leftOperand, rightOperand]);\n\n    const onDateChange = (date: MaterialUiPickersDate) => {\n      setConvertionDate(date as Date);\n    };\n\n    const onDialogClose = () => {\n      setIsHistoricalDialogOpen(false);\n    };\n\n    return (\n      <>\n        <div>\n          <Box marginBottom={1} display=\"flex\" alignContent=\"center\">\n            <DatePicker value={convertionDate} onChange={onDateChange} />\n            <Box paddingLeft={2} marginTop={4}>\n              <ShowChartsButton\n                disabled={!leftCurrency || !rightCurrency}\n                onClick={() => {\n                  setIsHistoricalDialogOpen(true);\n                }}\n              />\n              {removeEnabled && <RemoveButton onClick={onRemove} />}\n            </Box>\n          </Box>\n\n          <Box display=\"flex\">\n            {/* LEFT  OPERAND */}\n            <OperandInput\n              error={showAlert}\n              value={leftOperand}\n              onChange={(event) => {\n                setLeftOperand(event.target.value);\n              }}\n              onKeyDown={() => {\n                setPrintedResult(null);\n                setOperationMode(OperationMode.Forward);\n              }}\n              label={operationMode === OperationMode.Forward ? \"From\" : \"To\"}\n            />\n            <Box marginLeft={1}>\n              <CurrencySelector\n                onChange={(event, value) => {\n                  !!value && setLeftCurrency(value.key);\n                }}\n              />\n            </Box>\n            {/**/}\n\n            <Box marginLeft={1} marginRight={1}>\n              <OperationModeArrowIcon\n                error={showAlert}\n                operationMode={operationMode}\n              />\n            </Box>\n\n            {/* RIGHT  OPERAND */}\n            <Box marginRight={1}>\n              <CurrencySelector\n                onChange={(event, value) => {\n                  !!value && setRightCurrency(value.key);\n                }}\n              />\n            </Box>\n            <OperandInput\n              error={showAlert}\n              value={rightOperand}\n              onChange={(event) => {\n                setRightOperand(event.target.value);\n              }}\n              onKeyDown={() => {\n                setPrintedResult(null);\n                setOperationMode(OperationMode.Backward);\n              }}\n              label={operationMode === OperationMode.Forward ? \"To\" : \"From\"}\n            />\n            {/**/}\n          </Box>\n        </div>\n\n        {!!leftCurrency && !!rightCurrency && (\n          <DialogTimeSeries\n            leftCurrency={leftCurrency}\n            rightCurrency={rightCurrency}\n            convertionDate={convertionDate}\n            operationMode={operationMode}\n            DialogProps={{\n              open: isHistoricalDialogOpen,\n              onClose: onDialogClose,\n            }}\n          />\n        )}\n\n        <Snackbar open={showAlert}>\n          <Alert severity=\"error\">Invalid amount!</Alert>\n        </Snackbar>\n      </>\n    );\n  }\n);\n","import { memo } from \"react\";\n\nimport { IconButton, IconButtonProps } from \"@material-ui/core\";\nimport { ControlPoint } from \"@material-ui/icons\";\nimport { green } from \"@material-ui/core/colors\";\n\nexport const AddButton = memo(({ onClick, ...props }: IconButtonProps) => {\n  return (\n    <IconButton\n      {...props}\n      style={{ color: green[600] }}\n      onClick={onClick}\n      aria-label=\"remove-convertion-box\"\n    >\n      <ControlPoint />\n    </IconButton>\n  );\n});\n","import { useState } from \"react\";\n\nimport { Box, Divider } from \"@material-ui/core\";\n\nimport { ConversionBox } from \"../templates/ConversionBox\";\nimport { AddButton } from \"../atoms/AddButton\";\n\nexport const CurrenciesConverter = () => {\n  const [conversionBoxIndexes, setConversionBoxIndexes] = useState<number[]>([\n    0, //at least 1 box\n  ]);\n  const isThereMoreThanOneBox = conversionBoxIndexes.length > 1;\n\n  const addConversionBox = () => {\n    setConversionBoxIndexes((conversionBoxIndexes) => [\n      ...conversionBoxIndexes,\n      conversionBoxIndexes[conversionBoxIndexes.length - 1] + 1,\n    ]);\n  };\n\n  const removeConversionBox = (indexToRemove: number) => () => {\n    setConversionBoxIndexes((conversionBoxIndexes) =>\n      conversionBoxIndexes.filter((index) => index !== indexToRemove)\n    );\n  };\n\n  return (\n    <Box margin=\"auto\" padding={10} width=\"max-content\">\n      {conversionBoxIndexes.map((convertionBoxIndex, index) => (\n        <div key={convertionBoxIndex}>\n          <Box paddingTop={1} paddingBottom={1} display=\"flex\">\n            <ConversionBox\n              removeEnabled={isThereMoreThanOneBox}\n              onRemove={removeConversionBox(convertionBoxIndex)}\n            />\n          </Box>\n\n          {index !== conversionBoxIndexes.length - 1 && <Divider />}\n        </div>\n      ))}\n\n      <Divider />\n\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\n        <AddButton onClick={addConversionBox} />\n      </Box>\n    </Box>\n  );\n};\n","import { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport { AppBar, Toolbar } from \"@material-ui/core\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport { CurrenciesConverter } from \"./components/pages/CurrenciesConverter\";\n\nconst queryClient = new QueryClient();\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <AppBar position=\"fixed\">\n          <Toolbar>Ultimate Currency Converter 🚀</Toolbar>\n        </AppBar>\n        <CurrenciesConverter />\n      </MuiPickersUtilsProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}